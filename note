------------------------ M E R N    B L O G    W E B S I T E -----------------------------

        -------- <EXTENTIONS> ---
        1. Prettier
        2. Tailwind Css IntelliSense
        3. ES7 + React/Redux
        4. Multiple curson case preserve

        -------- </EXTENTIONS> ----

        1. Install Reactjs and Tailwind css and create the first Template

            1.1 npm create vite@latest
            1.2 npm install -D tailwindcss postcss autoprefixer (install tailwind css)
              1.2.1 npx tailwindcss init -p
              1.2.2 tailwind.config.js
              1.2.3 index.css


            1.3 github repository
                  1.3.1 git init
                  1.3.2 git add .
                  1.3.3 git commit -m "committed"
                  1.3.4 git remote add  "(github repo)"
                  1.3.5 git branch -M main
                  1.3.6 git push -u origin main

            1.4 To run - npm run dev


          2. Create pages and Routes

              2.1 Pages (Home, Projects, Dashboard, SignIn, SignUp)
              2.2 Routers - npm i react-router-dom {BrowserRouter, Routes, Route}

          3. Create Header Component

              3.1 install flowbite-react( To access various stylings) - npm install flowbite-react
              3.2 npm i react-icons (AiOutlineSearch for search-icon)

              Note -summary: Here we install flowbite-react inorder to access some stylings based on
                             Navbar where we could use <Navbar.Collapse>, <Navbar.Toggle>, <Navbar.link>
                             <Button color="gray" className="w-12 h-10 lg:hidden" pill>
                              -- here pill is used for round-shape
                               <AiOutlineSearch />
                              --Used to create Search Icon
                              className=" self-center whitespace-nowrap text-sm sm:text-xl font-semibold dark:text-white"
                              --  whitespace-nowrap used to not break the works if the width is not fit

           4. Create and Run the server

            4.1 npm init -y - This will create package.json file
            4.2 npm install express
            4.3 include type:"module" in package.json inorder to run node api/index.js(for using path module)
            4.4 inside the scripts in package.json include:

                  4.4.1 "dev": "nodemon api/index.js",
                  4.4.2 "start": node api/index.js (on deployment purpose we not use nodemon)
                  4.4.3 For use type:"module" or dev script we need to import express from "express" in index.js

            4.5 Drag gitignore file to the route folder inorder to commonly used b/w client and api

            Note: Here we need to connect the server. so inorder to do that we need to install express,
                  nodemon .


          5.Connect to the database

            5.1 npm install mongoose (import mongoose from "mangoose")
            5.2 npm i dotenv // inorder to use .env file

            Note: Here inorder to connected to the database we need to create mongodb
                  we will get an url to connect the database. Along with the url we need to
                  pass database-name before '?'. we need to create .env file inorder to store
                  the database url containing username and password.

                  To execute .env file we need to install npm i dotenv and import and use dotenv.config()
                  inorder to avoid .env file from commiting to github, include the file in gitignore


          6. Create user Model
                  6.1 create models folder inside api folder
                        6.1.1 create user.model.js file inside models folder

                  Notes: Here we provide some set of rules for how actually the username, password and email should be, what all the type, require and unique. So inorder to set some rules we use new mongose.Schema({}). Inorder to create the model we use mongose.model()
                  eg:
                   const userScheme = new mongose.Schema({
                        username: {
                              type: String,
                              required: true
                        }
                   })
                   const User = mongose.model("User",userSchema)
                   Inorder to use User all other file we need to export export default User

            7. Create a test API route

                  7.1 app.use("/api/user", useRouter)

                     - we created a folder named routes inside api folder. inside routes created user.route.js. where we return the get api test for eg:
                       const router = express.Router()
                        - inorder to use the router we need to import express
                       router.get("/test, test)
                        - here call back test is a callback function where we used to write the logic
                          and functions. so we created a controllers folder and inside that we
                          created user.controller.js

                          - export const test = (req,res) => {
                              res.json({
                                    message: "api working successfull"
                              })
                          }

                        so when we use the url localhost:3000/api/user/test it returns
                          "api is working fine" statement


            8. Create signup Api route

                  8.1 npm i bcryptjs -(Inorder to hide/hash the password before saving to                database)

                  8.2 create a auth.route.js and auth.controller.js files in routes folder and  controller folder.

                  Note: create a auth.route.js and auth.controller.js files.

                  auth.controller.js
                  ------------------
                        - Here we check whether the username, password,email from the req-body
                          are not empty or null. if it is empty we need to return status 400 error message. if it is not empty the we gonna register to the database with
                          the given details. So before registering we going to hashSync the password inorder to prevent the leakage.For that we need to install bcryptjs
                           -- const hashpasswod = bcryptjs.hashSync(password,10)

                  auth.route.js
                  -------------

                        - same as test api route , we import express and created a router for post api.
                        --- const router = express.Router()
                              router.post("/sign-up",signup)  - where callback signup is from auth.controller.js


            9. Add a middleware and a function to handle errors

                  Note:
                     - we create a folder named utils inside we create a file named error.js
                       where we use a return function errorHandler(err,req,res,next)
                       which return error

                   So inorder to handle errors in index.js we could give as

                        - app.use((err,req,res,next) => {
                              const statusCode = err.statusCode || 500
                              const message = err.message || "Internal Server Error
                              res.status(statusCode).json({
                                    success: false,
                                    message,
                                    statusCode
                              })
                        })

            10. Create signup page UI

                  Note: Here we create signUp ui with tailwind css

            11. Add Functionality to the signUp page

                  11.1 create an onChange event in each textInput as onChange={handleChange}
                        const handleChange = (e) => {
                              setFormData({...formData,[e.target.id]: e.target.value})
                        }
                        - So here on-change the input it will store into formData , which is initialized
                          using useState()

                  11.2 create a onSubmit={handleSubmit} on form tag inorder to submit the whole
                       fields data. on handleSubmit function we call fetch api
                        const res = fetch("/api/auth/sign-up", {
                              method: "POST",
                              headers: {"Content-Type": "application/json"}
                              body: res.stringify(formData)
                        })
                         const data = await res.json()

                         - So inorder to connect the port number we gave a change in vite.config.js
                               export defaultConfig({
                                    server: {
                                          proxy:{
                                                "/api":{
                                                      target: "http://localhost:3000,
                                                      secure: false
                                                }
                                          }
                                    }
                               })

            12. Create and add the footer component

                  12.1 create the footer using Footer from flowbite

                  12.2 import {BsFacebook, BsIntagram, BsTwitter, BsGithub} from 'react-icons/bs

            13. Create Sign in API route:

                  13.1 install jsonwebtoken npm i jsonwebtoken

                  Note:
                      - Here we check whether the email and password are valid. if its valid we create
                        the token and send to cookies on success
                        ie; res.status(200).cookies("access_token",token, {
                              httpOnly: true // its because the cookie only can be accessible with http
                                                request
                        })

                       - Inorder to hide the password from saving to the database we use destructuring
                         ie, const {password:pass, ..req} = ValidUser._doc

                        - pass: This variable holds the value of the password field from the document object (validUser._doc). It's used to avoid exposing the actual password in the response for security reasons.

                        -rest: This variable holds an object containing all remaining properties from the document object (validUser._doc) except for the password field. It's used to include all other user data in the response, excluding the password.

                       - Inorder to check the validPassword we use bcryptjs.compareSync(password,
                         ValidUSer.password)

            14. Complete signin page functionality

                  Note: create sign-in page same as that of sign-up

            15. Add redux toolkit

                  15.1 npm install @reduxjs/toolkit react-redux

                  15.2 install Redux DevTools extension in chrome

                  Note: create a store.js inside redux folder in src, created userSlice.js

                         store.js
                         --------

                         - created a configureStore function provided by redux-toolkit
                             - process of creating a redux store with some predefined defaults
                               and build-in middleware setup

                         - reducer field specifies the root reducer for the redux store
                             - reducer is the function specifies how the applications state changes
                               in response to the actions sent to the store

                             - Here useReducer is registered as the reducer for the 'user' slice of the
                               redux store

                         userSlice.js
                         ------------

                          - createSlice is a function provided by Redux toolkit that allows
                            creating a Redux slice.

                              -The initialState object defines the initial state for the user slice of
                               the Redux store. It includes properties such as currentUser, error, and  loading.

                               -The createSlice function automatically generates action creators
                                and reducer based on the defined reducers.

                           - we use these reducer functions inside the signin page using dispatch and
                             useSelector

            16. Add Redux persist

                    16.1 npm i redux-persist

                        16.1.1 import {combineReducers, PersistGate, persistReducer}

                              Note:  The persist actually uses like when we click on the sign-in button
                                     the data inside the field is stored in the store. but on refreshing the page it will change into null. So inorder to avoid that
                                     we use redux-persist to store the data inside the localStorage
                                     so that the data will not change into null on refreshing.


            17. Add Google Auth Functionality

                    17.1 npm install firebase

                    Note: -Create and OAuth.jsx where we created a "Continue with google" button
                           on clickin the event click it will call out the function handle handleGoogleClick which initalises the provider = new GoogleAuthProvider();

                           - provider.setCustomParameters({prompt:"select_account"}) , this will ask for
                             the google credentials to login  everytime we click on the "Continue with google" button. Otherwise when we sign in one time it automatically connected to the same account every time we click on the button

                           - on clicking the button,
                             const resultFormGoogle = await signInwithPopUp(auth,provvider);
                              const res = fetch("api/auth/google, {
                                    method:"POST",
                                    headers: {"Content-Type":"application/json"},
                                    body: JSON.stringigy({
                                          username: resultFormGoogle.user.displayName,
                                          email:resultFormGoogle.user.email,
                                          googleProfileUrl: resultFormGoogle.user.profileURL
                                    })
                              })
                              const data = res.json()

                           - if the data exists then we need to dispatch signInSuccess(data),
                             else we to dispatch signInFailure(error)

            18. Update header component with user data

                        Note: import useSelector from "react-redux" inorder to get the state from redux
                              state. So on the basis of the current User from the redux state we
                              display the profile pic of the logged user. otherwise it will display
                              a sign-In button instead


            19. Setting the theme

                        19.1 npm install prop-types

                        19.2 created ThemeProvider component inorder to wrap the children for providing
                              theme color all over the chidren.

                        19.3 created themeSlicer to create the reducer for toggleTheme. Based on
                             the toggle theme the bg-color change into dark and light.

                        19.4 import themeReducer in store.

                        19.5 Wrap the whole application app inside the ThemeProvider
                             component. So the whole application will act as a children prop for ThemeProvider component.


            20. Make the dashboard private

                  20.1    - created a component PrivateRouter.jsx inorder to find the whether the
                            currentUser from redux state is available or not. ie, whether the user logged in or not.

                          - If the detail.currentUser is empty then we could not navigate to the
                            dashboard. Once we try to navigate to dashboard without sign-in, then it will automatically redirected to sign-in.

            21. Complete Sidebar of the dashboard

                  21.1 create two components DashboardSidebar and DashboardProfile and
                       call it inside the dashboard.jsx

                  Note: - On DashboardSidebar we created a sidebar using Sidebar
                          from flowbite. The sidebar contains Profile tab and signout tab. So on clicking the profile tab it should display profile page as well as need to redirect the url into ?tab=profile.

                         - We need useLocation to get the current location.urlSearchParams inorder to get
                           the location.search url as well.  ie,

                           useEffect (() => {
                              const usePrams = new urlSearchParams(location.search)
                              const tabFromUrl = useParams.get("tab") //Here we get the search value
                                                                        given inside the tab ?tab=post
                              if(tabFromUrl){
                                    setTab(tabFromUrl)
                              }
                           },[location.search])


            22.Complete Profile Page UI

                        Note: - created profile page Ui with user profile which
                                we get from redux state using useSelector(state->state.user)

                              - create a form submission form with username, email, password
                                and a button to update the form. Also created a delete and signout button as well

                               - TextInput, Button are used from the flow-bite


            23.Complete User Image Upload Functionality

                        23.1 npm install react-circular-progress
                             - It is installed inorder to get the imageUpload Progress % while uploading
                               the image.

                        Note: An asynchronous upload image function is called on useEffect() based
                              selectedImage dependency.

                              - Inorder to store the image we uploading we use firebase storage.
                                So inorder to store we have various steps :

                                 const storage = getStorage(app) // getStorage imported from
                                                                    firebase/storage

                                  const fileName = selectedImage.name
                                  const storageRef = ref(storage,fileName)
                                  const uploadTask = uploadBytesResumable(storageRef, selectedImage)
                                  uploadTask.on("state_changed", (snapshot) => {
                                     const progress = (snapshot.bytesTransferred) / (snapshot.totalBytes) * 100;
                                     setImageUploadProgress(progress.toFixed(0))
                                  },
                                  (error) => {
                                    console.log(error)
                                  },
                                  () => {
                                    getDownloadURL(uploadTask.snapshot.ref).then((downloadUrl) => {
                                          setImageSelectedUrl(downloadUrl)
                                    })
                                  })

                               -- This is the steps needed to be done inorder to upload the image


            24. Add update user API route

                        24.1 npm i cookie-parser -> Inorder to get the cookie details

                        24.2 create verifyUser.js inside utils

                        Note:
                           - Inorder to update the user we need to check whether the user is logged in or
                             not. So inorder to verify we create verifyUser.js inside utils

                           - Inorder to access the token from cookies. req.cookies.access_token we need
                             to install package npm i cookie-parser. Import and use in index.js
                              app.use(cookieparser())

                            verifyUser.js
                            -------------

                           - fetch the token from req.cookie.access_token and verify it using jwt
                             with secret key

                             jwt.verify(token,process.env.SECRET_KEY,(err,user)){
                              if(err){
                                    return  next(errorHandler(401, "Unauthorized"));
                              }
                              req.user=user
                             }

                             user.controller.js
                             ------------------

                             - Its the function for update user with various validations

                                 - Check the req.user !== req.params.user_id

                                      - return error

                                  - check if there is username

                                          - check username contains atleast 6 characters, cannot
                                            contain spaces, should be lowercase, contains letter and
                                            numbers only

                                  - check the password

                                          - password should contains atleast 6
                                            characters.

                                          - hashSync the password
                                            creq.body.password = bcryptjs.hashSync(req.body.password,10)

                                   - check the user by findByIdAndUpdate(req.params.user_id, {
                                     $set: {
                                          username: req.body.username,
                                          email:req.body.email,
                                          password: req.body.password,
                                          profilePicture: req.body.profilePicture
                                     }
                                   }, {new:true} // inorder to set the update value otherwise it will fetch the previous value)

                                   const {password,...rest} = updateUser._doc
                                   res.status(200).json(rest)

                              user.router.js
                              --------------
                                  - import userUpdate inside the user.route.js
                                     router.put("user-update/:user_id,verifyUser/updateUser)

            25. Complete Update user profile page functionality

                        25.1 created userUpdateStart(),userUpdateSuccess(),userUpdateFailure()
                             reducer function in userSlice.js

                        Note:
                            - Here first we check the field has any changes. If not, then
                              it will return with setUpdateError(No changes made)

                            - if we do then, we need to validate for the fields username, password
                              email, profilePicture with various rules.

                             - Besides from above mentioned validation we made a api call for
                               update user

                               const res = await fetch("/api/user/user-update/${details.currentUser",{
                                    method: "PUT",
                                    headers:{"Content-Type":"application/json"},
                                    body:JSON.stringify(formData)
                               }})
                               const data = await res.json()

                             - Once its successfully updated then will display an alert with
                               "Updating the user is successful"

                             - Else Alert message will be displayed based on the error
                                 - If image uploading - "Image is Loading..."
                                 - If no changes made = "No changes made"

             26. Add delete user API route

                               Note:
                                 - create a deleteUser function in user.controller.js
                                    - check whether the req.params.user_id === req.user.id
                                        - if not return errorHandler(401,"User cannot be deleted)
                                        - otherwise, await User.findByIdAndDelete(req.params.user_id);
                                           res.status(200).json("User is deleted)

                                  - call the deleteUser function from user.route

                                          - router.delete("/delete/:user_id,verifyUser,deleteUser)


            27. Delete User Account Functionality

                        27.1 Add event handlers to delete button in profile dashboard
                              - on trigger delete button a modal should popup from flowbite

                              <Modal show={showModal} popup size="md">
                                    <ModalHeader/>
                                    <Modal.Body>
                                          <div>
                                                <AiOutlineExclamationCircle className="w-14 h-14 mx-auto>
                                                <h3>Are you sure you want to delete this account</h3>
                                                      <div className="flex">
                                                            <Button onClick={handleDelete}>Yes I'm sure</Button>
                                                            <Button>No,cancel</Button>
                                                       </div>
                                           </div>
                                    </Modal.Body>
                              </ModalHeader>

                              - Onclick Yes, Im sure button it will call a function handleDelete where it calls the delete api

                  28. Add Signout functionality

                         Note:
                           - Create a signout functionality inside user.controller.js

                                export const signout = async (req,res,next) => {
                                    await res.clearCookie("access_token").status(200).json("User signout successfully)
                                }

                           - call signout function inside user.router.js

                           - Inside DashSideBar, Header, Profile => there is a signout button on
                              which by clicking the button handleSignout function will trigger
                              and dispatch the signOutSuccess reducer function inorder to set the
                              currentUser, error, and loading to null

            29. Add admin functionality to the user

                        Note:

                           - Create isAdmin attribute inside the userModel

                               isAdmin: {
                                 type:Boolean,
                                 default:false
                           }

                           - In user.controller.js , add isAdmin inside the jwt signin
                              jwt.signIn({
                                    id: user._id,
                                    isAdmin: user.isAdmin
                              }, process.env.SECRET_KEY)

                              Like wise add isAdmin inside the google validation


             30.Complete create a post page UI

                              - npm install react-quill --save

                              - create a createPost page where it only allows to show for
                                isAdmin:true members.

                              - So inorder to do that, we created isAdminPrivateRouteOnly.jsx
                                component where we check whether,

                                details.currentUser.isAdmin ? <Outlet> : <Navigate to="/sign-in">
                                In app.js,

                                <Route element = {<isAdminPrivateRouter/>}>
                                    <Route path="/create-post" element={<CreatePost/>}>
                                </Route>

                                - So whats happening is like, if isAdmin is true it will redirect to the children createPost page. Otherwise,  will redirected to sign-in

                                - create Page includes:
                                          -Title
                                          - FileInput and UploadImage Button
                                          - React Quill
                                          -Publish Button

            31. Create a post API route

                        31.1 create post.route.js
                              - import express from "express"
                              - const router - express.Router()
                              -router.post("/create",verifyToken,createPost)

                        31.2 create post.model.js
                              -import mongoose from "mongoose"
                              - const postScheme = new mongoose.Schema(
                                    title: {
                                          type:String,
                                          unique:true,
                                          required:true
                                    },
                                    content: {
                                          type:String,
                                          required:true
                                    },
                                    image : {
                                          type:String,
                                          default: "someUrl"
                                    }
                                    ....etc
                              )   
                              const POST = mongoose.model("POST",postSchema);
                              export default POST;
                              
                        31.3 Create post.controller.js 

                              - check whether isAdmin is true or not
                                  if(!req.user.isAdmin){
                                   return next(errorHandler(401,"User cannot createPost))
                                  }     

                               - check whether the title and content are empty or not
                                    if(!req.body.title || !req.body.){
                                          return next(errorHandler(401,"Fill all the fields"))
                                    }   
                                    const slug = req.body.title.split("").join("").toLowerCase().replace(/[^a-zA-Z0-9]/g, "-")

                              - If everything good then will create a post and save into database
                                    const newPOST = new POST({
                                          ...req.body,
                                          slug,
                                          userId:req.user.id
                                    })     
                                    const savePost = await newPost.save()
                                    res.status(201).json(savePost) 


                  32. Complete upload post image functionality

                        32.1

